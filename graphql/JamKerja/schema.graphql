type JamKerja {
  id: ID!
  users_profile_id: Int!
  no_wbs: String!
  kode_proyek: String!
  proyek_id: Int!
  aktivitas_id: Int!
  tanggal: String!
  jumlah_jam: Float!
  keterangan: String
  status_id: Int!
  mode_id: Int!
  created_at: DateTime
  updated_at: DateTime
  deleted_at: DateTime
}

input CreateJamKerjaInput {
  users_profile_id: Int!
  no_wbs: String!
  kode_proyek: String!
  proyek_id: Int!
  aktivitas_id: Int!
  tanggal: String!
  jumlah_jam: Float!
  keterangan: String
  status_id: Int!
  mode_id: Int!
}

input UpdateJamKerjaInput {
  users_profile_id: Int
  no_wbs: String
  kode_proyek: String
  proyek_id: Int
  aktivitas_id: Int
  tanggal: String
  jumlah_jam: Float
  keterangan: String
  status_id: Int
  mode_id: Int
}

extend type Query {
  allJamKerja: [JamKerja!]!
    @all(model: "App\\Models\\JamKerja\\JamKerja")

  jamKerjaByNoWbs(no_wbs: String! @where(operator: "like", key: "no_wbs")): [JamKerja!]!
    @all(model: "App\\Models\\JamKerja\\JamKerja")

  jamKerja(id: ID! @eq): JamKerja
    @find(model: "App\\Models\\JamKerja\\JamKerja")
    
  allJamKerjaArsip: [JamKerja!]!
    @field(resolver: "App\\GraphQL\\JamKerja\\Queries\\JamKerjaQuery@allArsip")
}

extend type Mutation {
  createJamKerja(input: CreateJamKerjaInput! @spread): JamKerja
    @create(model: "App\\Models\\JamKerja\\JamKerja")

  updateJamKerja(id: ID! @eq, input: UpdateJamKerjaInput! @spread): JamKerja
    @update(model: "App\\Models\\JamKerja\\JamKerja")

  deleteJamKerja(id: ID! @eq): JamKerja
    @delete(model: "App\\Models\\JamKerja\\JamKerja")

  restoreJamKerja(id: ID!): JamKerja
    @field(resolver: "App\\GraphQL\\JamKerja\\Mutations\\JamKerjaMutation@restore")

  forceDeleteJamKerja(id: ID!): JamKerja
    @field(resolver: "App\\GraphQL\\JamKerja\\Mutations\\JamKerjaMutation@forceDelete")
}
